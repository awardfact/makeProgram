리액트는 자바스크립트 라이브러리로 사용자 인터페이스를 만드는 데 사용한다
데이터가 변할때마다 어떤 변화를 줄지 고민하지 않고 기존 뷰를 날리고 처음부터 새로 랜더링 하는 방식이다
MVC패턴에서 V만 담당한다 
리액트에서 특정 부분이 어떻게 동작할지 정하는 선언체가 있는데 이를 컴포넌트라고 한다 
컴포넌트는 재사용이 가능한 API로 수많은 기능을 내장하고 있으며 컴포넌트 하나에서 해당 컴포넌트의 생김새와 작동 방식을 정의한다 

UI가 처음에 어떻게 보일지 정할때 초기 렌더링이 필요하다
리액트에서는 이를 다루는 render함수가 있다 
render함수는 컴포넌트가 어떻게 생겼는지 정의하는 역할을 한다 
컴포넌트 내부에는 다른 컴포넌트가 들어갈 수 있고 이때 내부에 있는 컴포넌트들도 재귀적으로 렌더링한다 
최상위 컴포넌트의 랜더링 작업이 끝나면 지니고 있는 정보들을 사용해 HTML마크업을 만들고 이를 윌가 정하는 실제 페이지의 DOM요소 안에 주입한다

리액트에서 업데이트를 진행할떄 ㅇ보기에는 변화에 따라 뷰가 변형되는 것처럼 보이지만 실제는 새로운 요소로 갈아 끼우는 방식이다 
컴포넌트는 데이터를 업데이트 했을 떄 단순히 업데이트한 값을 수정하는 것이 아니라 새로운 데이터를 가지고 render함수를 다시 호출한다 

리액트의 주요 특징 중 하나는 Virtual Dom을 사용한다는 것이다
Dom은 Document Object Model의 약어이다 객체로 문서 구조를 표현하는 방법으로 XML이나 HTML로 작성한다 
웹에서는 DOM을 활용해 자바스크립트와 CSS를 적용한다 DOM은 트리형태로서 특정 노드를 찾고 수정하고 제거할 수 있다 
DOM은 동적 UI에 최적화되어있지 않아서 자바스크립트를 활용해 동적으로 만드는데 DOM자체는 빠른데 웹에서 DOM에 변화가 일어나면
css를 다시 연산하고 레이아웃 구성하고 페이지를 리페인트 해서 시간이 오래걸리는 것 처럼 보인다
이 해결법으로 리액트는 Virtual Dom 방식을 사용하여 DOM업데이트를 추상화함으로써 DOM처리 횟수를 최소화하고 효율적으로 진행한다 

Virtaul Dom을 사용하면 실제 DOM에 접근하여 조작하는 대신 이를 추상화한 자바스크립트 객체를 구성하여 사용한다 
리액트의 데이터가 변해 웹에서 실제 DOM을 업데이트 할 떄는 다음 세 가지 절차를 밟는다
1. 데이터를 업데이트하면 전체 UI를 Virtual DOM에 리렌더링 한다 
2. 이전 Virtual Dom에 있던 내용과 현재 내용을 비교한다 
3. 바뀐 부분만 실제 DOM에 적용한다

웹 프레임워크가 MVC 또는 MVW등의 구조를 지향하는 것과 달리 리액트는 오직 뷰만 담당한다 다른 웹 프레임워크가 ajax, 데이터 모델링, 라우팅 등과
같은 기능을 내장하고 있는 반면 리액트는 오직 뷰만 신경쓰는 라이브러리이므로 기타 기능을 직접 구현해서 사용해야 한다 
라우팅을 쓸때는 리액트 라우터 ajax처리는 axois나 fetch 상태 관리에는 리덕스나 MobX등을 사용하여 빈 자리를 채운다 
그리고 리액트는 다른 웹 프레임워크나 라이브러리와 혼용할 수도 있다 예를 들어 backbone.js AngularJs등 프레임워크와 함꼐 사용이 가능하다 


리액트 프로젝트를 만들 떄는 Node.js를 반드시 먼저 설치해야 한다 Node는 크롬 V8 자바스크립트 엔진으로 빌드한 자바스크립트 런타임이다
이것으로 웹 브라우저가 아닌 환경에서도 자바스크립트를 사용할 수 있게 해준다 
리액트는 웹 브라우저에서 실행되는 코드로 node와 직접적인 연관은 없지만 프로젝트를 개발하는 데 필요한 도구들이 Node를 사용한다
Node를 설치하면 패키지 도구인 npm이 설치된다 npm을 통해 많은 패키지를 설치하고 설치한 패키지의 버전을 관리할 수 있다 

 npm은 yarn으로 대체할 수 있는데 npm보다 더 빠르고 효율적인 캐시 시스템과 부가 기능을 제공한다 
yarn 설치 - npm install --global yarn          설치 확인 - yarn --version

리액트를 할때 자주 사용하는 에디터로는 서브라임 텍스트 , 브래킷, VsCode, 아톰 등이 있다 

vs코드에서 확장 프로그램으로 
ESLint  - 자바스크립트 문법 및 코드 스타일 검사
Reactjs Code Snippets - 리액트 컴포넌트 및 라이프사이클 함수를 작성할 떄 단축 단어를 사용하여 간편하게 코드를 생성하는 코드 스니펫 모음
Prettier-Code formatter - 코드 스타일을 자동으로 정리해 주는 도구 
Korean Language Pack for Visual Stuido Code - vsCode언어를 한국어로 설정하여 사용할 수 있게 해준다 


yarn create-react-app 프로젝트 이름 또는
npm init react-app 프로젝트 이름을 통해 리액트 프로젝트 작업 환경을 구축할 수 있다 

프로젝트를 생성하고 프로젝트 디렉터리로 이동한 뒤 
yarn start 또는 npm start를 하면 리액트 페이지가 열린다 

리액트 폴더로 들어가서 app.js파일을 열면 여러 코드가 작성되어 있다 

import './App.css'; 이런식으로 import구문을 사용하는데 이는 특정 파일을 불러오는 것을 의미한다 리액트에서는 import를 사용하여 다른 파일을 불러와 사용할 수 있다 
이러한 기능을 브라우저에서도 사용하기 위해 번들러를 사용하는데 대표적은 번들러로는 웹팩, Parcel , browserify라는 도구들이 있고 각 도구마다 특성이 다르며 리액트에서는 주로 웹팩을 사용한다
웹팩은 편의성과 확장성이 다른 도구보다 뛰어나다 
번들러 도구를 사용하면  import로 모듈을 불러왔을 때 불러온 모듈을 모두 합쳐 하나의 파일을 생성해 주고 최적화 과정에서 여러개의 파일로 분리될 수도 있다
웹팩을 사용하면 SVG파일과 CSS파일도 불러와서 사용할 수 있다 파일을 불러오는 것은 웹팩의 로더라는 기능이 담당한다 로더는 여러 종류가 있는데
css-loader는 CSS파일을 불러올 수 있게 해주고 file-loader는 웹 폰트나 미디어 파일 등을 불러올 수 있게 해준다 babel-loader는 자바스크립트 파일을 불러오면서
최신 자바스크립트 문법으로 작성된 코드를 바벨이라는 도구를 사용해 ES5문법으로 변환해준다 

웹팩 로더는 원래 직접 설치 설정해줘야 하지만 create-react-app을 할때 설정되기 때문에 별도의 설정은 안 해도 된다 
function Article(props){

  return       <article>
  <h2>{props.title}</h2>
  {props.body}
</article>;

}
위의 코드는 Article이라는 컴포넌트를 만들어준다  function 컴포넌트이름(){}이런식으로 만든다 이러한 컴포넌트를 함수 컴포넌트라고 부른다 
프로젝트에서 컴포넌트를 렌더링하면 함수에서 반환하고 있는 내용을 나타낸다 이런 코드는 JSX라고 부른다 

JSX는 자바스크립트의 확장 문법이며 XML과 매우 비슷하게 생겼다 이런 형식으로 작성된 코드는 브라우저에서 실행되기 전에 
바벨을 이용해서 일반 자바스크립트 형태로 변환된다 


JSX의 장점들은 다음과 같다
1. 보기 쉽고 익숙하다  - 일반 자바스크립트보다 jsx로 작성한게 가독성도 높고 더 쉽다 
2. 활용도가 높다 - JSX에서는 html태그를 사용할 수 있을 뿐만 아니라 컴포넌트도 JSX안에서 작성할 수 있다 
index.js 파일을 열면  ReactDOM.reader.render 가 있는데 이 코드는 컴포넌트 페이지를 렌더링하는 역할을 하며
react-dom모듈을 불러와 사용할 수 있다 첫 번째 파라미터는 렌더링할 내용을 JSX형태로 작성하고 두 번쨰 파라미터는 해당 JSX를 렌더링할
document내부 요소를 설정한다 


JSX를 사용할 때 몇 가지 규칙을 준수해야 한다 

1. 감싸인 요소 - 컴포넌트에 여러 요소가 있다면 반드시 부모 요소 하나로 감싸야 한다 
ex) <h1>1</h1> <h2>2</h2> 이런식으로 있으면 오류  =>  <div> <h1>1</h1> <h2>2</h2></div> 이렇게 해야함 
요소를 사용하고 싶지 않으면 <fragment>태그로 감싸면 된다 해당 태그는 <>로도 표현이 가능하다 

2. 자바스크립트 표현 - JSX안에는 자바스크립트 표현식을 쓸 수 있다 자바스크립트 표현식을 작성하려면 JSX내부에서 코드를 {}로 감싸면 된다
let과 const는 블록 단위로 let은 변수 const는 상수를 선언할 때 사용하는 키워드이다 

3. if문 대신 조건부 연산자 - JSX내부 자바스크립트 표현식에서 if문을 사요할 수는 없다 하지만 조건에 따라 다른 내용을 렌더링할때는 JSX밖에서 if문을
사용하여 사전에 값을 설정하거나 {}안에 조건부 연산자를 사용하면된다 
ex) {naeme =='리액트' ? (<h1>1</h1>) : (<h2>2</h2>)}

4. AND 연산자(&&)를 사용한 조건부 렌더링 -  특정 조건을 만족할 떄 내용을 보여주고 아니면 렌더링하지 않는 상황에서 조건부 연산자를 사용할 수도 있지만
 &&연산자를 사용하면 더 편하게 조건부 렌더링을 할 수 있다 
ex) {name = "리액트" && <h1>리액트</h1>}
여기서 주의할 점을 false한 값인 0은 예외적으로 화면에 나타난다 

5.undefinded를 렌더링하지 않기  - 리액트 컴포넌트에서는 함수 undefined만 반환하여 렌더링하는 상황을 만들면 안된다 
ex) const name = undefined; return name; 이렇게 하면 오류가 난다 이거는 const name=undefined; return name || '값이 undefined입니다';이런식으로 해결해준다
JSX내에서 undefined를 렌더링하는건 상관없다 
ex) const name= undefined; return <div>{name}</div>; 

6.인라인 스타일링  - 리액트에서 DOM요소에 스타일 적용할 떄 문자열 형태로 넣는 것이 아니라 객체 형태로 넣어야된다
스타일 이름에서 background-color 처럼 - 문자가 포함되어있는걸 -를 없애고 카멜 표기법으로 바꿔야 한다 backgroundColor 

7. class대신 className - 일반 html에서 css클래스를 사용할 떄는 <div class='myclass' 같이 > class라는 속성을 설정한다 하지만 JSX에서는
class가 아닌 className으로 설정해 주어야 한다  class로 해도 실행은 되는데 consloe창에 오류가 뜬다 

8. 꼭 닫아야 하는 태그 -  html코드에서 <input은  < input></input >이렇게 안하고 <input>으로만 해도 동작하지만 JSX에서는 태그를 닫지 않으면
오류가 발생한다 


9. 주석 - JSX에서 주석을 작성하는 방법은 일반 자바스크립트에서 주석을 작성할 떄와 조금 다르다 
JSX에서 주석은 {/*  .... */} 와 같은 형식으로 작성해야 한다 일반 자바스크립트 주석으로 작성하면 주석은 페이지에 그대로 나타나게 된다 

ESLint와 Prettier 
ESLint는 문법 검사 도구이고 Prettier는 코드 스타일 자동 정리 도구이다 

EsLint는 코드를 작성할 때 실수를 하면 에로 혹은 경고 메시지를 Vs Code에디터에 바로 확인할 수 있게 해준다 
에디터 하단에 뜨는 문제 탭은 VsCode상단 메뉴에서 보기 > 문제를 클릭하여 열 수 있다 
초록색 줄로 그어진 에러는 고치기 싫으면 무시해도 좋지만 빨간색 줄로 그어진 코드는 반드시 고쳐야 한다 

Prettier - JSX를 작성할 떄 들여쓰기 안하면 코드 가독성이 떨어져서 들여쓰기를 사용한다  난잡한 코드일 때 VSCODE에서 f1을 누르고
format이라고 입력한 다음 엔터를 누르면된다  Prettier를 사용하여 자동 코드 정리를 하면 코드가 제대로 정렬되고 세미콜론이 빠진 곳에는 세미콜론이
추가되고 작은따옴표는 큰 따옴표로 변한다 
Preiiter의 장점은 이러한 스타일을 쉽게 커스터마이징할 수 있다 프로젝트의 루트 디렉토리에서 .prettierrc라는 파일을 입력하고
스타일을 설정해주면 커스텀이 가능하다 
저장할 때 자동으로 실행을 시킬수도 있는데 이렇게 설정 하려면 vsCode에서 Code또는 파일>기본설정>설정 메뉴를 클릭
상단 텍스트 박스에서 format on save를 검색하여 나타나는 체크 박스에 체크를 하면 된다 


컴포넌트

컴포넌트를 선언하는 방식은 함수형, 클래스형이 있다  보통 함수형을 쓴다 
클래스형 예시 
class App extends Componet{ render(){ const name= 'react'; return <div classname="react">{name}</div>;
함수형 예시
function app(){ const name = 'react' return<div classname="react">{name}</div>;
함수 컴포넌트는 클래스형보다 선언이 편하고 메모리 자원도 덜 사용하고 빌드 후 배포할 때도 파일의 크기가 더 작다 
단점은 state와 라이프사이클 api가 사용 불가능하다는 건데 이 단점은 리액트 v16.8업데이트 이후 Hooks라는 기능이 도입되면서 해결됐다 
리액트 공식 사이트에서도 함수 + hooks를 권장하고 있다 

화살표 함수는 ES6문법에서 함수를 표현하는 새로운 방식이다 기존 function 과는 사용 용도가 다르다 화살표 함수는 주로 함수 파라미터 전달할 때 유용하다
function으로 사용했을 때는 this가 자신이 종속된 객체를 가리키는데 화솔표 함수는 자신이 종속된 인스턴스를 가리킨다 

Vscode에서 Reactjs Code snippet확장 프로그램을 설치했다면 컴포넌트 코드를 간편하게 생성할 수 있다 에디터에서 res를 입력하고 엔터를 누르면 
컴포넌트 코드가 생성된다  클래스형 컴포넌트는 rec를 입력하여 사용할 수 있다 

모듈을 내보내는 코드는 export를 사용하면 되는데 다음과 같이 사용한다 